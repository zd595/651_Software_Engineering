/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'java'
    id 'com.bmuschko.clover' version '2.2.3' // thrid-party Gradle plugin
}

/** extends clover plugin */ 
clover {
    report{
        xml=true
        html=true
    }
}

/** configures subprojects */
subprojects{
    apply plugin: 'java' // core Gradle plugin
    apply plugin: 'com.bmuschko.clover'

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }
        report{
            xml=true
            html=true
        }
    }

    repositories {
        // jcenter()  // jcenter is deprecated
        mavenCentral()
    }

    dependencies {
        // Use JUnit Jupiter for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
        testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
        // This dependency is used by the application.
        implementation 'com.google.guava:guava:30.1.1-jre'
        clover 'org.openclover:clover:4.4.1'
        // Use Mockito
        testImplementation "org.mockito:mockito-core:3.+"
    }

    test{
        useJUnitPlatform() // Use junit platform for unit tests
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
}

/** configures projects' dependencies */
project (':shared'){
}
project (':server'){
    dependencies {
        implementation project(':shared')
    }
}
project (':client'){
    dependencies {
        implementation project(':shared')
    }
}

/** customized taks */
tasks.register("run-server") {
    // dependsOn project('server').getTasksByName('run',false)
    dependsOn project('server').getTasksByName('bootRun',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

tasks.register("resolveDependencies") {
    dependsOn project('server').getTasksByName('resolveDependencies',false)
    dependsOn project('client').getTasksByName('resolveDependencies',false)
    group = 'Build'
    description = 'Resolve/Download Dependencies'
}
